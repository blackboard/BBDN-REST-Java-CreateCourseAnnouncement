/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.CoreMatchers.instanceOf;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;

import java.io.File;
import java.io.IOException;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.ArrayList;
import java.util.List;

import bbdn.caching.CacheUtil;

import bbdn.rest.BbDef;
import bbdn.rest.BbID;

import bbdn.rest.announcement.Announcement;
import bbdn.rest.announcement.Announcements;
import bbdn.rest.announcement.AnnouncementService;

import bbdn.rest.oauth.Authorizer;

import bbdn.rest.common.Availability;
import bbdn.rest.common.Duration;



 //@Disabled
public class AnnouncementServiceTest {

  static AnnouncementService annService = new AnnouncementService();


  static String[] fields = { "title", "body" };

  static String course_id = "_4_1";

  static String annTitle = "My Course Announcement";
  static String annBody = "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"«math xmlns=¨http://www.w3.org/1998/Math/MathML¨»«mn»3«/mn»«mo»/«/mo»«mn»4«/mn»«mroot»«mn»7«/mn»«mn»2«/mn»«/mroot»«/math»\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>";

   //@Disabled
  @BeforeAll
  public static void setUpBeforeAll() {
    String url = "";
    String key = "";
    String secret = "";
    boolean secure = false;

    try {
      ObjectMapper mapper = new ObjectMapper();

      JsonNode root = mapper.readTree(new File("test_config.json"));

      url = root.path("url").asText();
      key = root.path("key").asText();
      secret = root.path("secret").asText();
      secure = root.path("secure").asBoolean();
    } catch (IOException ioe) {
      ioe.printStackTrace();
    }

    Authorizer authorizer = new Authorizer(
            url,
            key,
            secret,
            secure);

    authorizer.authorize();
  }


  //@Disabled
  @Test
  @DisplayName("Create Announcement")
  public void testCreateAnnouncement(TestInfo testInfo) {
    String DESCRIPTION = "Should create a Course Announcement";

    BbID[] ids = { new BbID(BbDef.IDName.COURSE, course_id, BbDef.IDType.PRIMARY) };

    Availability avl = new Availability();
    Duration dur = new Duration();

    dur.setType("Permanent");

    avl.setDuration(dur);
    
    Announcement ann = new Announcement();
    ann.setTitle(annTitle);
    ann.setBody(annBody);
    ann.setDraft(false);
    ann.setAvailability(avl);

    Announcement obj = annService.create(ann, ids, null);

    assertAll(DESCRIPTION,
      () -> assertThat(obj, is(instanceOf(Announcement.class)))
    );

  }

}
